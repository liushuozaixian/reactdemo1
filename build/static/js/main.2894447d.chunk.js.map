{"version":3,"sources":["components/SearchBar/SearchBar.js","components/ProductCategoryRow/ProductCategoryRow.js","components/ProductRow/ProductRow.js","components/ProductTable/ProductTable.js","pages/FilterableProductTable/FilterableProductTable.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","dealFilterTextChange","event","console","log","target","value","props","onFilterTextChange","dealInStockOnlyChange","persist","onInStockOnlyChange","checked","type","placeholder","this","filterText","onChange","inStockOnly","React","Component","ProductCategoryRow","className","category","ProductRow","product","name","stocked","style","color","price","ProductTable","middleArr","lastKine","data","forEach","index","indexOf","push","key","FilterableProductTable","setState","state","date","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2894447d.chunk.js","sourcesContent":["import React from 'react';\r\nimport './SearchBar.css';\r\nclass SearchBar extends React.Component {\r\n  // constructor(props) {\r\n  //   super(props)\r\n  //   this.dealFilterTextChange = this.dealFilterTextChange.bind(this)\r\n  // }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <input type=\"text\" placeholder=\"Search...\" value={this.props.filterText} onChange={this.dealFilterTextChange} />\r\n        <input type=\"checkbox\" checked={this.props.inStockOnly} onChange={this.dealInStockOnlyChange} />是否只查看有货商品\r\n      </div>\r\n    )\r\n  }\r\n  dealFilterTextChange = (event) => {\r\n    console.log('dealFilterTextChange')\r\n    console.log(event.target.value)\r\n    this.props.onFilterTextChange(event.target.value)\r\n  }\r\n  dealInStockOnlyChange = (event) => {\r\n    // console.log('dealInStockOnlyChange')\r\n    // console.log(event)\r\n    event.persist()\r\n    console.log(event)\r\n    console.log(event.target)\r\n    this.props.onInStockOnlyChange(event.target.checked)\r\n  }\r\n\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\r\nimport './ProductCategoryRow.css';\r\nclass ProductCategoryRow extends React.Component {\r\n  // constructor(props) {\r\n  //   super(props)\r\n  //   this.state = {\r\n  //     dataDemo: ''\r\n  //   }\r\n  // }\r\n  render() {\r\n    return (\r\n      <div className='title'>\r\n        <div>种类是:</div>\r\n        <div>{this.props.category}</div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default ProductCategoryRow;","import React from 'react';\r\nimport './ProductRow.css';\r\nclass ProductRow extends React.Component {\r\n  // constructor(props) {\r\n  //   super(props)\r\n  //   this.state = {\r\n  //     dataDemo: ''\r\n  //   }\r\n  // }\r\n  render() {\r\n    var product = this.props.product\r\n    var name = product.stocked === true ? <span style={{ color: 'red' }}>\r\n      {product.name}\r\n    </span> : product.name\r\n    return (\r\n      <div className='title'>\r\n        <div>我是:{name}</div>\r\n        <div>{this.props.product.price}</div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default ProductRow;","import React from 'react';\r\nimport './ProductTable.css';\r\nimport ProductCategoryRow from '../ProductCategoryRow/ProductCategoryRow'\r\nimport ProductRow from '../ProductRow/ProductRow'\r\nclass ProductTable extends React.Component {\r\n  // constructor(props) {\r\n  //   super(props)\r\n  // }\r\n  render() {\r\n    var filterText = this.props.filterText;\r\n    var inStockOnly = this.props.inStockOnly;\r\n    var middleArr = []\r\n    var lastKine = null\r\n    this.props.data.forEach((product, index) => {\r\n      if (product.name.indexOf(filterText) === -1) {\r\n        return\r\n      }\r\n      if (inStockOnly && !product.stocked) {\r\n        return\r\n      }\r\n      if (product.category !== lastKine) {\r\n        middleArr.push(<ProductCategoryRow key={product.name + '1'} category={product.category}></ProductCategoryRow>)\r\n      }\r\n      middleArr.push(<ProductRow key={product.name} product={product}></ProductRow>)\r\n      lastKine = product.category\r\n    })\r\n    console.log('DSGGG:', middleArr)\r\n    return (\r\n      <div>\r\n        <div className='title'>\r\n          <div>种类</div>\r\n          <div>价格</div>\r\n        </div>\r\n        {middleArr}\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default ProductTable;","import React from 'react';\r\nimport './FilterableProductTable.css';\r\nimport SearchBar from '../../components/SearchBar/SearchBar'\r\nimport ProductTable from '../../components/ProductTable/ProductTable'\r\nconsole.log('????')\r\nclass FilterableProductTable extends React.Component {\r\n  // constructor(props) {\r\n  //   super(props)\r\n  //   this.state = {\r\n  //     dataDemo: ''\r\n  //   }\r\n  // }\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      date: [\r\n        { category: \"Sporting Goods\", price: \"$49.99\", stocked: true, name: \"Football\" },\r\n        { category: \"Sporting Goods\", price: \"$9.99\", stocked: true, name: \"Baseball\" },\r\n        { category: \"Sporting Goods\", price: \"$29.99\", stocked: false, name: \"Basketball\" },\r\n        { category: \"Electronics\", price: \"$99.99\", stocked: true, name: \"iPod Touch\" },\r\n        { category: \"Electronics\", price: \"$399.99\", stocked: false, name: \"iPhone 5\" },\r\n        { category: \"Electronics\", price: \"$199.99\", stocked: true, name: \"Nexus 7\" }\r\n      ],\r\n      filterText: 'oo',\r\n      inStockOnly: false\r\n    }\r\n  }\r\n  onFilterTextChange=(value) => {\r\n    console.log('???????=======================')\r\n    this.setState(\r\n      {\r\n        filterText: value\r\n      }\r\n    )\r\n  }\r\n  onInStockOnlyChange=(value) => {\r\n    console.log('+__+_+_+_+_+_+_+_+_+')\r\n    console.log(value)\r\n    this.setState({\r\n      inStockOnly: value\r\n    })\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <SearchBar onFilterTextChange={this.onFilterTextChange} onInStockOnlyChange={this.onInStockOnlyChange} filterText={this.state.filterText} inStockOnly={this.state.inStockOnly}></SearchBar>\r\n        <ProductTable data={this.state.date} filterText={this.state.filterText} inStockOnly={this.state.inStockOnly}></ProductTable>\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default FilterableProductTable;","import React from 'react';\r\nimport './App.css';\r\nimport FilterableProductTable from './pages/FilterableProductTable/FilterableProductTable.js'\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <FilterableProductTable />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App data={'what'}/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}